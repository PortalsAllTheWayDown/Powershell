A variable might be like a box but an array is a whole bunch of baxoes taped together, a list of items represented by a single variable.

Defining Arrays:
$colorPicker = @('blue','white','yellow','black')

output when called:
blue
white
yellow
black

The @ sign followed by an opening parenthesis and zero or more elements separated by a comma signals to PowerShell that you'd like to create an array.

Reading Array Elements:
To access an element in an array you use the name of the array followed by a pair of square brackets ([]) that contain the index of the element you want to access.
As with string characters, you start numering arrays at 0.
In PowerShell using -1 will return the final element.

$colorPicker[0]
blue

$colorPicker[4]
This gives an error "Index was outside the bounds of the array"

To access multiple elements in an array at the same time you can use the range operator(..)between two numbers.
It will return those two numbers and every number between them:
PS>1..3
1
2
3

$colorPicker[1..3]
white
yellow
black

Modifying Elements in an Array:
You can reference an item with its index and use the equal sign to aassign a new value.

$colorPicker[3]
black

$colorPicker[3] = 'white'
$colorPicker
white

Adding Elements to an Array:
$colorPicker = $colorPicker + 'orange'
$colorPicker
blue
white
yellow
white
orange

Notice that you enter $colorPicker on both sides of he equal sign. This is because you are asking PowerShell to interpolate
the $colorPicker variable and then add a new element.

You can also jsut do:
$colorPicker += "blue"

To add multiple:
$colorPicker += @('pink','cyan')
You dont need the @ or the parantheses you can also just do:
$colorPicker += "blue","green"

Removing an element from an array is more complicated.

ArrayLists:
Every time you add an element to an array, your actually creating a new array from your old (interplated) array and the new element.
PowerShell destroys your old array and makes a new one. This is because arrays in PowerShell have a fixed size.
Because you cant modify the size so you have to create new array.
So you might notice a performance hit when working with very large arrays.
So if you have to add or remove many elements to an array its recommended to use a ArrayList.
They dont have a fixed size, they can be dynamically adjusted to add or remove elements, giving a higher performance when working with large amounts of data.

$colorPicker = [System.Collections.ArrayList]@('blue','white','yellow','black')
$colorPicker
blue
white
yellow
black

Adding Elements to an ArrayList:
To add or remove an element from an ArrayList without destroying it, you can use its methods. You can use the Add() and Remove() methods to add or remove items from an ArrayList.


$colorPicker.Add('gray')
4

It output the number 4 which is the index of the new element you added.
Typically you wont use this number so you can send the Add() method output to the $null variable to prevent it from outputting anything.

$null = $colorPicker.Add('gray')

There are a few ways to negate output from PowerShell commands but assigning output to $null gives the best performance, as the $null variable cannot be reassigned.

Removing Elements from an ArrayList:
$colorPicker.Remove('gray')

You dont have to know the index number to remove an item.
You can reference the element by its actual value,  in this case gray.
If the array has multiple elements with the same value, PowerSell will remove the element closest to the start of the Arraylist.

On much larger data sets the ArrayLists perform better than the normal arrays.


